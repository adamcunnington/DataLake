import importlib

import click

from titan import models
import titan


@click.command()
@click.option("-p", "--python-name", help="The name of the executable console script. Typically, this is generated by "
              "setuptools' entry points.", required=True)
@click.option("-f", "--friendly-name", help="A friendly name of the acquire program which will be user-facing and must "
              "be unique across all acquire programs.", required=True)
@click.option("-d", "--data-source-name", help="The name of the data source which must be unique across all acquire "
              "programs. This attribute forms a part of the execution taxonomy.", required=True)
@click.option("-a", "--author", help="The author of the acquire program, assumed to be owner of the maintenance of the "
              "program.", required=True)
@click.option("-c", "--click-command-func", required=True, help="The full name (including namespaces) of the function "
              "decorated by click that represents the entry point for the acquire program.")
@click.option("-e", "--enabled", is_flag=True)
@click.option("-k", "--acquire-program-key", type=int, help="The id (database primary key) of the acquire program to "
              "update. If not provided, the details will be registered as a new acquire program.")
def main(python_name, friendly_name, data_source_name, author, click_command_func, enabled, acquire_program_key):
    namespace, func = click_command_func.rsplit(".", 1)
    module = importlib.import_module(namespace)
    command = getattr(module, func)
    flask_app = titan.create_app("register")
    acquire_program = {
        "AcquireProgramPythonName": python_name,
        "AcquireProgramFriendlyName": friendly_name,
        "AcquireProgramDataSourceName": data_source_name,
        "AcquireProgramAuthor": author,
        "AcquireProgramEnabled": enabled,
        "AcquireProgramHelp": command.help,
        "Options": []
    }
    options = acquire_program["Options"]
    for option in command.params:
        name = max(option.opts, key=len)
        # We don't want to store load date as this variable won't be set by the user configuration of the acquire step
        if name == "--load-date":
            continue
        options.append({
            "AcquireProgramOptionName": name,
            "AcquireProgramOptionRequired": option.required,
            "AcquireProgramOptionType": option.type.name,
            "AcquireProgramOptionHelp": option.help
        })
    with flask_app.app_context():
        if acquire_program_key is None:
            flask_app.logger.info("Register new acquire program...")
            models.insert_acquire_program(acquire_program)
        else:
            acquire_program["AcquireProgramKey"] = acquire_program_key
            flask_app.logger.info("Updating existing acquire program...")
            models.update_acquire_program(acquire_program)
